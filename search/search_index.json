{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Cockpitdecks Configs provides a set of configurations for different aircraft for use with Cockpitdecks and X-Plane. Development and testing is primarily on the Loupedeck Live but it should be possible to re-use most of the elements with other decks.</p>"},{"location":"#aircraft-configurations","title":"Aircraft Configurations","text":"<ul> <li> Cessna 172 SP</li> <li> Cirrus SR22</li> <li> Beechcraft Baron 58</li> <li> Lancair Evolution</li> <li> Toliss Airbus A321 NEO</li> <li> Toliss Airbus A320 NEO</li> <li> Aerobask Robin DR401</li> </ul> <p>Cockpitdecks build</p> <p>Cockpitdecks is constantly evolving; check here which versions are compatible with these configs.</p> <p>Compatible / supported versions as of writing:</p> <ul> <li> Experimental fork Cockpitecks</li> <li> Cockpitdecks</li> </ul> <p>Get Started</p>"},{"location":"#known-issues","title":"Known Issues","text":"<p>Known issues with latest build</p> <ul> <li>Data icons (such as those found in weather page of Beechcraft Baron 58) not currently working with latest cockpitdecks build.</li> <li>Issues with latest build and EncoderValueExtended/EncoderToggle but should be having a fix soon.</li> <li>IconSide used for the custom sides may be renamed to not conflict with original IconSide.</li> </ul> <p>Issues above all resolved in latest build of cockpitdecks and cockpitdecks-configs.</p>"},{"location":"#examples","title":"Examples","text":""},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2024/05/01/cockpitdecks-configs-100/","title":"Cockpitdecks-Configs 1.0.0","text":"<p>Released 1.0.0 version with support for the following aircraft:</p> <ul> <li> Cessna 172 SP</li> <li> Cirrus SR22</li> <li> Beechcraft Baron 58</li> </ul> <p>https://github.com/dlicudi/cockpitdecks-configs/releases/tag/v1.0.0</p>"},{"location":"blog/2024/05/01/cockpitdecks-configs-100/#highlights","title":"Highlights","text":"<ul> <li> Home page with icons providing access to up to 12 pages.</li> <li> Annunciators (e.g. Oil pressure, Voltage, fuel pressure)</li> <li> Next waypoint info providing distance, ETA and desired track.</li> <li> Throttle and mixture encoders (knobs).</li> <li> Autopilot encoders (heading, altitutde, vertical speed).</li> <li> Altitude barometer (QNH) encoder.</li> <li> Ignition long press button.</li> <li> Buttons to control fuel lever (off, left, right).</li> <li> Autopilot functions.</li> <li> Buttons for ADF, COM1, VLOC1 and function to toggle from standby to active.</li> <li> Encoders for ADF/COM/NAV values with toggle between coarse and fine by pressing encoder.</li> <li> Full page (12 buttons) for engine instrumentation (e.g. RPM, oil temp, oil pressure).</li> <li> Button displaying fuel duration in hours based on fuel flow and remaining fuel.</li> <li> Pedestal page providing flaps/brakes control.</li> <li> Full page for SQUAWK code/mode.</li> <li> Weather page provides X-Plane region based wind info, temperature, visibility, dew point, QHN, tropo and cloud layer data.</li> <li> Views page with standard views and 8 quick look buttons with long press for memorising views.</li> <li> Dedicated pages for GCU 478 and GNS 530.  </li> </ul> <p>Note</p> <p>Not all functions exist across all aircraft currently.</p>"},{"location":"community/contributing/","title":"Contributing","text":""},{"location":"community/guide/","title":"Development Guide","text":""},{"location":"community/guide/#visual-studio-code-setup","title":"Visual Studio Code setup","text":"settings.json<pre><code>{\n    \"yaml.schemas\": {\n      \"https://squidfunk.github.io/mkdocs-material/schema.json\": \"mkdocs.yml\"\n    },\n    \"yaml.customTags\": [ \n      \"!ENV scalar\",\n      \"!ENV sequence\",\n      \"!relative scalar\",\n      \"tag:yaml.org,2002:python/name:material.extensions.emoji.to_svg\",\n      \"tag:yaml.org,2002:python/name:material.extensions.emoji.twemoji\",\n      \"tag:yaml.org,2002:python/name:pymdownx.superfences.fence_code_format\"\n    ]\n  }\n</code></pre> launch.json<pre><code>{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Cessna 172 SP\",\n      \"type\": \"python\",\n      \"request\": \"launch\",\n      \"program\": \"~/Documents/GitHub/cockpitdecks/bin/cockpitdecks_upd_start.py\",\n      \"args\": [\n        \"~/Documents/Github/cockpitdecks-configs/decks/cessna-172-sp/\"\n      ],\n      \"console\": \"integratedTerminal\",\n      \"pythonPath\": \"python3.10\"\n    },\n    {\n      \"name\": \"Beechcraft Baron 58\",\n      \"type\": \"python\",\n      \"request\": \"launch\",\n      \"program\": \"~/Documents/GitHub/cockpitdecks/bin/cockpitdecks_upd_start.py\",\n      \"args\": [\n        \"~/Documents/Github/cockpitdecks-configs/decks/beechcraft-baron-58/\"\n      ],\n      \"console\": \"integratedTerminal\",\n      \"pythonPath\": \"python3.10\"\n    },\n    {\n      \"name\": \"Cirrus SR22\",\n      \"type\": \"python\",\n      \"request\": \"launch\",\n      \"program\": \"~/Documents/GitHub/cockpitdecks/bin/cockpitdecks_upd_start.py\",\n      \"args\": [\n        \"~/Documents/Github/cockpitdecks-configs/decks/cirrus-sr22/\"\n      ],\n      \"console\": \"integratedTerminal\",\n      \"pythonPath\": \"python3.10\"\n    },\n    {\n      \"name\": \"Robin DR401\",\n      \"type\": \"python\",\n      \"request\": \"launch\",\n      \"program\": \"~/Documents/GitHub/cockpitdecks/bin/cockpitdecks_upd_start.py\",\n      \"args\": [\n        \"${workspaceFolder}/decks/robin-dr401/\"\n      ],\n      \"console\": \"integratedTerminal\",\n      \"pythonPath\": \"python3.10\"\n    }\n  ]\n}\n</code></pre>"},{"location":"community/resources/","title":"Resources","text":""},{"location":"community/resources/#x-plane","title":"X-Plane","text":"<ul> <li>https://developer.x-plane.com/datarefs/</li> <li>https://www.x-plane.com/support/manuals/</li> </ul>"},{"location":"decks/aerobask-robin-dr401/","title":"Aerobask Robin DR401","text":""},{"location":"decks/aerobask-robin-dr401/#deck-functions","title":"Deck Functions","text":""},{"location":"decks/aerobask-robin-dr401/#home","title":"Home","text":""},{"location":"decks/aerobask-robin-dr401/#pfi","title":"PFI","text":"<p>Primary flight instruments. Wind data represented as found on G1000. Next waypoint info includes the next waypoint id. Uses FCU encoders (left and right knobs/displays).</p>"},{"location":"decks/aerobask-robin-dr401/#switches","title":"Switches","text":"<p>Provides two pages mainly for switches. Uses light encoders (for adjusting brightness). Left encoders are for fine adjustments (1% steps). Right encoders are for coarse adjustments (10% steps).</p> <p>Start up procedure example:</p> <ul> <li> BATTERY ON</li> <li> MASTER ENGN ON</li> <li> AVIONICS ON</li> <li> ALTERNATOR ON</li> <li> FLAPS 25</li> <li> FUEL ON</li> <li> IGNITION LONG PRESS</li> </ul>"},{"location":"decks/aerobask-robin-dr401/#audio-panel","title":"Audio Panel","text":"<p>Audio panel (Garmin GMA-1347)</p>"},{"location":"decks/aerobask-robin-dr401/#fcu","title":"FCU","text":""},{"location":"decks/aerobask-robin-dr401/#g1000","title":"G1000","text":""},{"location":"decks/aerobask-robin-dr401/#radio","title":"Radio","text":""},{"location":"decks/aerobask-robin-dr401/#engine","title":"Engine","text":"<p>Warning</p> <p>Engine to be corrected for engine type.m<sup>1</sup></p>"},{"location":"decks/aerobask-robin-dr401/#pedestal","title":"Pedestal","text":""},{"location":"decks/aerobask-robin-dr401/#transponder","title":"Transponder","text":""},{"location":"decks/aerobask-robin-dr401/#weather","title":"Weather","text":""},{"location":"decks/aerobask-robin-dr401/#views","title":"Views","text":"<ol> <li> <p>G1000_Manual.pdf [MFD] Engine Indication System (EIS) on page 54.\u00a0\u21a9</p> </li> </ol>"},{"location":"decks/beechcraft-baron-58/","title":"Beechcraft Baron 58","text":"<p>This configuration supports various cockpit functions for the Beechcraft Baron 58.</p> <p>Primary Instruments (1) Engine Instrumentations (2) Avionics Panel (3) Instrument Sub Panel (4) Throttle Quadrant / Center Console (5) Autopilot (6)</p> <ol> <li>Primary Instruments<ul> <li> Airspeed Indicator</li> <li> Altimeter</li> <li> Vacuum Gauge</li> <li> Variometer</li> </ul> </li> <li>Engine Instrumentations<ul> <li> Manifold Pressure</li> <li> Propeller RPM</li> <li> Fuel Flow</li> <li> Engine Temperature</li> <li> Oil Temperature and Pressure</li> </ul> </li> <li>Avionics Panel<ul> <li> Transponder</li> <li> COMM 1 and COMM 2 Radios</li> <li> NAV 1 and NAV 2 Radios</li> <li> GNS 530</li> <li> ADF Frequency Selection Panel</li> </ul> </li> <li>Instrument Sub Panel<ul> <li> Master Electrical Switches</li> <li> Avionics Master Power and Prop Sync</li> <li> Pitot Heat Switches</li> <li> Icing Switches</li> <li> Fuel Boost Pump Switches</li> <li> Lights Panel</li> <li> Landing Gear Lever</li> <li> Parking Brake</li> <li> Fuel Gauges</li> </ul> </li> <li>Throttle Quadrant / Center Console<ul> <li> Throttle Levers</li> <li> Prop Levers</li> <li> Mixture Levers</li> </ul> </li> <li>Autopilot <ul> <li> AP</li> <li> HDG</li> <li> FD</li> <li> ALT</li> <li> NAV</li> <li> BC</li> <li> APPR</li> <li> DN / UP Rocker Switch</li> </ul> </li> </ol>"},{"location":"decks/beechcraft-baron-58/#deck-functions","title":"Deck Functions","text":"<p>This cockpit deck consists of 13 pages and 4 unique encoder configurations.</p> <p>The pages can be accessed via the hardware buttons 1 through to 7 or buy navigating to the home page via the 0 button.</p> <pre><code>mindmap\n  Loupedeck Live\n    Button 0\n      Home\n        G530\n        WEATHER\n        VIEWS\n    Button 1\n        PFI\n    Button 2\n        SWITCHES        \n            ICING\n            LIGHTS\n            G530\n    Button 3\n        AUTOPILOT\n            G530\n    Button 4\n        RADIO\n    Button 5\n        ENGINE\n    Button 6\n        PEDESTAL\n    Button 7\n        XPDR</code></pre>"},{"location":"decks/beechcraft-baron-58/#pages","title":"Pages","text":""},{"location":"decks/beechcraft-baron-58/#home","title":"Home","text":"<p>The home page provides an index to all the various pages available (up to a total of 12).</p> <p>The bottom buttons can provide quick access to up to 7 different pages.</p> <p>Note</p> <p>Various pages are still work in progress (e.g. Pedestal, Views)</p>"},{"location":"decks/beechcraft-baron-58/#pfi","title":"PFI","text":"<p>Central to this page is data you would consider primary flight instruments. The speed, bearing, altitude and vertical speed fill the first row.</p> <p>The second row consists of engine data in a more compact form than that found in the engine page.</p> <p>The third row consists of:</p> <ul> <li>Fuel duration (a calculation of time remaining based on fuel flow and fuel quantity).</li> <li>Caution annunciators.</li> <li>Warning annunciators.</li> <li>Information on the next waypoint in flight plan.</li> </ul>"},{"location":"decks/beechcraft-baron-58/#switches","title":"Switches","text":"<p>This page provides buttons for battery, alternators, avionics, prop sync and fuel pumps.</p> <p>There are also two ignition buttons IGN 1 and IGN 2 which are longpress buttons to start engines.</p> <p>Icing and lights have had to be placed in separate pages as it was impossible to fit them here.</p>"},{"location":"decks/beechcraft-baron-58/#icing","title":"Icing","text":"<p>There are buttons to cover icing functions for left and right pitot (PITOT L and PITOT R), stall warn, prop and windshield.</p> <p>For boots functions there is a BOOTS AUTO which can set the boots to inflate automatically at intervals, a button to switch boots off (BOOTS OFF) and a longpress button (BOOTS) that can be used to manually inflate boots.</p>"},{"location":"decks/beechcraft-baron-58/#lights","title":"Lights","text":"<p>Most of these are self explanatory. One possible improvement will be to add encoders for the panel lights.  </p>"},{"location":"decks/beechcraft-baron-58/#fcu","title":"FCU","text":""},{"location":"decks/beechcraft-baron-58/#g530","title":"G530","text":""},{"location":"decks/beechcraft-baron-58/#radio","title":"Radio","text":""},{"location":"decks/beechcraft-baron-58/#engine","title":"Engine","text":""},{"location":"decks/beechcraft-baron-58/#pedestal","title":"Pedestal","text":""},{"location":"decks/beechcraft-baron-58/#transponder","title":"Transponder","text":""},{"location":"decks/beechcraft-baron-58/#weather","title":"Weather","text":"<p>This page provides comprehensive weather data including coverage for different cloud layers and tropo data.</p>"},{"location":"decks/beechcraft-baron-58/#views","title":"Views","text":"<p>Provides quick look functions (long press to memorise views). Also provides standard views (3D Cockpit, Chase, Forward, Physics)</p>"},{"location":"decks/beechcraft-baron-58/#encoders","title":"Encoders","text":""},{"location":"decks/beechcraft-baron-58/#fcu_1","title":"FCU","text":"<p>Provides barometer setting (QNH), throttle/mix (THR/MIX) controls and autopilot controls such as HDG and VS. Throttle and Mixture can be set to 100% by pressing the encoder.</p> <ul> <li> <p> Left</p> <ul> <li> THR Throttle control (both engines).</li> <li> HDG Heading/bearing for autopilot.</li> <li> QNH Altimeter barometer setting.</li> </ul> </li> <li> <p> Right</p> <ul> <li> ALT Not used.</li> <li> VS Vertical speed.</li> <li> MIX Fuel mixture (both engines).</li> </ul> </li> </ul>"},{"location":"decks/beechcraft-baron-58/#radio_1","title":"Radio","text":"<p>Provides controls for XPDR, Transponder mode, ADF frequency, COM and VLOC. XPDR, ADF, COM and VLOC encoders have a coarse/fine toggle; pressing the encoder will toggle between coarse/fine adjustment.</p> <ul> <li> <p> Left</p> <ul> <li> XPDR Transponder identifier.</li> <li> Mode Transponder <sup>STBY/ON/ALT/TEST</sup>.</li> <li> ADF ADF frequency.</li> </ul> </li> <li> <p> Right</p> <ul> <li> Not used.</li> <li> COM COM1 frequency.</li> <li> VLOC VLOC frequency.</li> </ul> </li> </ul>"},{"location":"decks/beechcraft-baron-58/#pedestal_1","title":"Pedestal","text":"<p>Provides individual throttle, prop and mixture engine controls.</p> <ul> <li> <p> Left</p> <ul> <li> THROT Throttle for left engine.</li> <li> PROP Propeller speed for left engine.</li> <li> MIX Fuel mixture control for left engine.</li> </ul> </li> <li> <p> Right</p> <ul> <li> THROT Throttle for right engine.</li> <li> PROP Propeller speed for right engine.</li> <li> MIX Fuel mixture control for right engine.</li> </ul> </li> </ul>"},{"location":"decks/beechcraft-baron-58/#g530_1","title":"G530","text":"<p>These encoders provide control of G530 elements.</p> <ul> <li> <p> Left</p> <ul> <li> RNG Zoom in and out of map.</li> <li> COM/VLOC OUTER Coarse control for COM or VLOC frequency. </li> <li> COM/VLOC INNER Fine control for COM or VLOC frequency.</li> </ul> </li> <li> <p> Right</p> <ul> <li> VOLUME Controls COM1 or VLOC volume (push button to toggle between).</li> <li> GPS OUTER Coarse control for GPS knob. </li> <li> GPS INNER Fine control for GPS knob.</li> </ul> </li> </ul>"},{"location":"decks/beechcraft-baron-58/#procedures","title":"Procedures","text":"<p>Procedures in relation to Loupedeck functions.</p>"},{"location":"decks/beechcraft-baron-58/#before-starting-engines","title":"Before Starting Engines","text":"<ul> <li> Exterior Inspection \u2013 COMPLETED</li> <li> Parking Brake \u2013 ON</li> <li> Power Levers \u2013 SLIGHTLY FORWARD</li> <li> Propeller Levers \u2013 FULL FORWARD</li> <li> Mixture Levers \u2013 FULL FORWARD</li> <li> All switches \u2013 OFF</li> <li> Battery Switch \u2013 ON</li> <li> Fuel Quantity \u2013 CHECK</li> <li> Check Annunciator Panel Warning Lights.</li> </ul>"},{"location":"decks/beechcraft-baron-58/#engine-start","title":"Engine Start","text":"<ul> <li> Master Battery Switch \u2013 CHECK ON</li> <li> Avionics Master Switch \u2013 OFF</li> <li> Left Alternator Switch \u2013 ON</li> <li> Left Magneto Switch \u2013 START (hold until engine running)</li> </ul>"},{"location":"decks/beechcraft-baron-58/#when-left-engine-running","title":"When Left Engine Running","text":"<ul> <li> Left Power Lever \u2013 IDLE (FULL BACK)</li> <li> Left Magneto Switch \u2013 CHECK BOTH</li> <li> Right Alternator Switch \u2013 ON</li> <li> Right Magneto Switch \u2013 START (hold until engine running)</li> </ul>"},{"location":"decks/beechcraft-baron-58/#when-right-engine-running","title":"When Right Engine Running","text":"<ul> <li> Right Power Lever \u2013 IDLE (FULL BACK)</li> <li> Right Magneto Switch \u2013 CHECK BOTH</li> </ul>"},{"location":"decks/cessna-172-sp/","title":"Cessna 172 SP","text":""},{"location":"decks/cessna-172-sp/#supported-functions","title":"Supported Functions","text":"<ul> <li> <p> Primary Instruments</p> <ul> <li> Airspeed Indicator</li> <li> Attitude Indicator</li> <li> Heading Indicator</li> <li> Turn Coordinator</li> <li> Altimeter</li> <li> Vertical Speed Indicator</li> </ul> </li> <li> <p> Secondary Instruments</p> <ul> <li> Chronometer</li> <li> Fuel</li> <li> Exhaust Gas Temp / Fuel Flow</li> <li> Oil Temperature / Pressure</li> <li> Vac Pressure / Battery Ammeter</li> <li> Propeller RPM / Hobbs Meter</li> <li> VOR1 / ILS Receiver</li> <li> VOR2 Receiver</li> <li> ADF Receiver</li> </ul> </li> <li> <p> Avionics</p> <ul> <li> Audio Switching Panel</li> <li> GNS 530</li> <li> GNS 430</li> <li> Transponder Panel</li> <li> Autopilot Panel</li> <li> ADF Panel</li> <li> NAV / GPS Button</li> </ul> </li> <li> <p> Switch Panel</p> <ul> <li> Magneto-Select, and Starter</li> <li> Master Alternator and Battery Switch</li> <li> Toggle Switches</li> <li> Avionics Bus Switches</li> <li> Panel and Radio Brightness Controls</li> <li> Pedestal and Glare-Shield Brightness Controls</li> </ul> </li> <li> <p> Throttle &amp; Mixture / Pedestal</p> <ul> <li> Throttle Lever</li> <li> Mixture Lever</li> <li> Elevator Trim</li> <li> Fuel Selector</li> <li> Panel and Radio Brightness Controls</li> <li> Pedestal and Glare-Shield Brightness Controls</li> </ul> </li> <li> <p> Annunciator Panel</p> <ul> <li> L FUEL R</li> <li> OIL PRESS</li> <li> L VAC R</li> <li> VOLTS</li> </ul> </li> </ul>"},{"location":"decks/cessna-172-sp/#supported-variants","title":"Supported Variants","text":"<p>G1000</p> <p>Additional buttons were added to support the additional G1000 AP functions (FD/VNAV/FLC).# Engine</p> <ul> <li> Cessna_172SP_G1000</li> <li> Cessna_172SP_seaplane</li> <li> Cessna_172SP</li> </ul>"},{"location":"decks/cessna-172-sp/#pages","title":"Pages","text":"<p>Deck consists of 7 pages which can be accessed via the lower hardware numbered button.</p>"},{"location":"decks/cessna-172-sp/#pfi-primary-flight-instruments","title":"PFI (Primary flight instruments)","text":"<ul> <li>Airspeed Indicator: Displays speed in knots.</li> <li>Heading: Displays magnetic bearing.</li> <li>Altimeter: Displays altitude and barometer setting.</li> <li>Vertical Speed: Displays vertical speed.</li> <li>Fuel Quantity:  Fuel remaining in left/right tank. Fuel converted from kg to gallons using RPN 0.264172.</li> <li>EGT and Fuel Flow: Displays exhaust gas temperature and fuel flow.</li> <li>Oil: Displays oil temperature and pressure.</li> <li>Vacuum/Pressure and Battery Ammeter: Vacuum pressure and battery current (positive indicates charging, negative depleting).</li> <li>Propeller Speed: Propeller speed in RPM. Engine RPM the same given that it is direct drive.</li> <li>Caution Annunciators: Oil pressure and voltage caution annunciators.</li> <li>Warning Annunciators: Fuel pressure and vacuum pressure warning annunciators.</li> <li>NAVGPS mode: Display for navigation mode and also a push button to toggle between NAV (VLOC) and GPS.</li> <li>Next Waypoint: If there is a flight plan being followed, this button will display data related to the next waypoint e.g. nautical miles left, desired track (bearing), and ETA in minutes.    </li> </ul>"},{"location":"decks/cessna-172-sp/#switches","title":"Switches","text":"<p>Switches (Battery, alternator, lights etc)</p> <p></p> <p>Warning</p> <p>PythonPlugin required for long press button (/Resources/Plugins/PythonPlugins/PI_cockpitdecks_helper.py) <ul> <li>Starter motor: Long press push button functionality is facilitated by a Python plugin.</li> <li>Alternator: Controls power supply to systems and battery charging when the engine is running.</li> <li>Battery: Controls power supply when the engine is not running.</li> <li>Fuel Pump: Controls electric fuel pump for priming engine and as a backup for mechanical pump failure.</li> <li>Beacon: On/off control for rotating beacon light.</li> <li>Landing Lights: On/off control for landing light.</li> <li>Taxi Lights: On/off control for taxi light.</li> <li>Navigation Lights: On/off control for wing and tail lights.</li> <li>Strobe Lights: On/off control for wing strobe lights.</li> <li>Pitot Heat: On/off control for pitot tube heater.</li> <li>Avionics Bus 1: Powers BUS1, including Comm Panel, G530 GPS, Transponder, Autopilot, and BUS2.</li> <li>Avionics Bus 2: Powers BUS2, including G430 GPS, VOR2, and ADF.</li> </ul>"},{"location":"decks/cessna-172-sp/#fcu","title":"FCU","text":"<p>FCU (Provides autopilot functions)</p> <p></p> <p>Note</p> <p>Some functions are not available on S-TEC 55 Autopilot (Cessna 172 G530 model).</p> <ul> <li>AP: Engages or disengages the autopilot system.</li> <li>FD: Not available on S-TEC 55 Autopilot model. Provides visual cues for manual flight control based on autopilot logic without actually controlling the aircraft.</li> <li>HDG: Heading mode. Autopilot turns the aircraft to heading selected via Heading Bug knob.</li> <li>ALT: Altitude mode holds the current altitude.</li> <li>NAV: Directs aircraft heading according to flight plan programmed into GPS (GPS mode) or to/from a radio navigation aid (VLOC mode).</li> <li>VNAV: Not available on S-TEC 55 Autopilot model. Manages aircraft's vertical path according to a predefined route or waypoint altitudes.</li> <li>APR: Activates an Instrument Landing System (ILS) approach mode for precision guidance during landing approaches.</li> <li>REV/BC: Engages mode for flying an ILS localiser back-course approach, used for approaches where the aircraft is flying away from the beacon.</li> <li>VS: Vertical speed mode to maintain an ascent or descent rate.</li> <li>FLC: Not available on S-TEC 55 Autopilot model. Maintains a set airspeed while climbing or descending to a selected altitude.</li> </ul>"},{"location":"decks/cessna-172-sp/#radio","title":"Radio","text":"<p>Radio (ADF, COM/NAV functions)</p> <p></p> <ul> <li>ADF FREQ: Displays ADF frequency and ADF standby frequency. Pressing button will swap frequencies.</li> <li>COM 1: Displays COM1 frequency and COM1 standby frequency. Pressing button will swap frequencies.</li> <li>VLOC 1: Displays NAV1 frequency and NAV1 standby frequency. Pressing button will swap frequencies.</li> </ul>"},{"location":"decks/cessna-172-sp/#engine","title":"Engine","text":"<p>Engine (Displays engine data)</p> <p></p> <ul> <li>ENG RPM: Displays engine/prop RPM.</li> <li>MANIFOLD PRESSURE: Displays manifold pressure.</li> <li>OIL TEMP: Displays oil temperature.</li> <li>OIL PRESSURE: Displays oil pressure.</li> <li>FUEL FLOW: Display fuel flow in GPH.</li> <li>Formula: <code>fuel_flow_kg_sec 3600 * 0.8 / 3.78541 / 2 roundn</code></li> <li>CHT: Displays cylinder head temp in celsius.</li> <li>BATTERY:</li> <li>Displays battery charge in watts per hour.</li> <li>Displays battery amps (negative value means battery is discharging)</li> <li>THROTTLE: Displays throttle as a percentage.</li> <li>FUEL EST: Provides an estimate on fuel remaining in hours, based on current fuel flow.</li> <li>Formula: <code>fuel_flow_kg_sec[0]} 3 roundn 0.000001 + / 3600 / 1 roundn</code></li> <li>MIXTURE: Displays fuel mixture as a percentage.</li> </ul>"},{"location":"decks/cessna-172-sp/#pedestal","title":"Pedestal","text":"<p>Pedestal (Flaps, gear)</p> <p></p> <ul> <li>THROTTLE: Displays throttle as a percentage.</li> <li>TOGGLE BRAKES: Displays the state of the parking brake. Push will toggle parking brake on/off.</li> <li>MIXTURE: Displays fuel mixture as a percentage.</li> <li>FLAPS UP: Extends flaps one notch.</li> <li>FLAPS RATIO: Displays flaps state as a number between 0 and 1 (0 fully retracted, 1 fully extended).</li> <li>FLAPS DOWN: Retracts flaps one notch.</li> </ul>"},{"location":"decks/cessna-172-sp/#transponder","title":"Transponder","text":"<p>Transponder (Change transponder mode and id) </p> <ul> <li>SQUAWK CODE BUTTONS: The top four buttons display the squawk code and serve as push buttons to increment the transponder digits.</li> <li>Transponder Mode Buttons:</li> <li>ON</li> <li>OFF</li> <li>STBY</li> <li>ALT</li> <li>TEST</li> <li>IDENT: Transmits radio beacon for a short period of time.</li> <li>RADIO BEACON: Displays an R if the transponder is broadcasting. This will display intermittently or constantly for a short period of time if IDENT is pushed.</li> <li>MODE: Displays the current mode of the transponder.</li> </ul>"},{"location":"decks/cirrus-sr22/","title":"Cirrus SR22","text":""},{"location":"decks/cirrus-sr22/#functions","title":"Functions","text":"<p>Battery and Electrical Panel(1) G1000 Control Panel(2) Autopilot Controls(3) Audio Panel(4) Flap Panel(5) Throttle Quadrant(6) Backup Instrumentation(7) Parking Brake and Alternate Air Selector(8) PFD Controls &amp; Features(9) MFD Controls &amp; Features(10).</p> <ol> <li> <p> Battery and Electrical Panel:</p> <ul> <li> Ignition</li> <li> Electrics (BAT 1, BAT 2, ALT 1, ALT 2)</li> <li> AVIONICS</li> <li> Lights (NAV, STROBE, LAND, ICE)</li> <li> Ice Protection (PITOT HEAT, ICE PROTECT, PUMP BKUP, WIND SHLD)</li> <li> Instrument Lighting</li> </ul> </li> <li> <p> G1000 Control Panel:</p> <ul> <li> Direct To (a waypoint)</li> <li> MENU key</li> <li> PROC key</li> <li> FMS rotary</li> <li> COM/NAV/CRS/XPDR rotary combo<ul> <li> NAV button</li> <li> COM button</li> <li> XPDR button</li> <li> CRS button</li> </ul> </li> <li> IDENT button</li> <li> Frequency toggle button</li> <li> Keypad</li> <li> Range rotary</li> <li> FPL button</li> <li> CLR button</li> <li> ENT button</li> <li> Home button</li> </ul> </li> <li> <p> Autopilot Controls:</p> <ul> <li> Rotary<ul> <li> HDG Rotary</li> <li> DN/UP VS Rotary</li> <li> ALT SEL Rotary</li> </ul> </li> <li> APR</li> <li> AP</li> <li> LVL</li> <li> FLC</li> <li> VNV</li> <li> ALT</li> <li> VS</li> <li> FD</li> <li> NAV</li> <li> HDG</li> </ul> </li> <li> <p> Audio Panel:</p> <ul> <li> COM1/COM2</li> <li> MIC1/MIC2</li> <li> NAV1/NAV2</li> <li> MKR MUTE</li> </ul> </li> <li> <p> Flap Panel:</p> <ul> <li> FLAP LEVER</li> <li> SUPPLIMENTAL OXYGEN</li> </ul> </li> <li> <p> Throttle Quadrant:</p> <ul> <li> THROTTLE</li> <li> MIXTURE</li> <li> FUEL (TANK) SELECTOR</li> </ul> </li> <li> <p> Backup Instrumentation:     Not Implemented</p> </li> <li> <p> Parking Brake and Alternate Air selector:</p> <ul> <li> PARKING BRAKE</li> <li> ALTERNATE AIR SOURCE</li> </ul> </li> <li> <p> PFD Controls &amp; Features:</p> <ul> <li> NAV Audio Squelch</li> <li> Active &amp; Stand-by NAV1 and NAV2 Frequencies</li> <li> Attitude Indicator</li> <li> Next Waypoint</li> <li> Active &amp; Stand-by COM1 and COM Frequencies</li> <li> COM Frequency Toggle</li> <li> COM Audio Squelch</li> <li> COM Rotary</li> <li> CRS/BARO Rotary</li> <li> Altimeter</li> <li> Joystick</li> <li> Flight Plan Key Group</li> <li> FMS Rotary</li> <li> Horizontal Situation Indicator (HSI)</li> <li> Soft Keys</li> <li> ALT Rotary</li> <li> Autopilot Key Group</li> <li> HDG Rotary</li> <li> Airspeed Indicator</li> <li> NAV Rotary</li> <li> NAV Frequency Toggle</li> </ul> </li> <li> <p> MFD Controls &amp; Features:</p> <ul> <li> NAV Audio Squelch</li> <li> Active &amp; Stand-by NAV1 and NAV2 Frequencies</li> <li> Navigation Map</li> <li> Data Fields</li> <li> COM Frequency Toggle</li> <li> COM Audio Squelch</li> <li> COM Rotary</li> <li> CRS/BARO Control</li> <li> Joystick</li> <li> Flight Plan Key Group</li> <li> FMS Rotary</li> <li> Soft Keys</li> <li> ALT Rotary</li> <li> Autopilot Key Group</li> <li> HDG Rotary</li> <li> NAV Rotary</li> <li> NAV Frequency Toggle</li> <li> Engine Indication System (EIS)</li> </ul> </li> </ol>"},{"location":"decks/cirrus-sr22/#home","title":"Home","text":"<p>Provides links to pages (up to 12).</p> <p></p> <p>Note</p> <p>The numbered buttons (1 to 7) also provide links to pages but this is limited to 7.</p>"},{"location":"decks/cirrus-sr22/#pfi","title":"PFI","text":"<p>Primary Flight Instruments.</p> <p></p> <p>Airspeed Indicator(1) Heading(2) Altimeter(3) Vertical Speed(4) Fuel Quantity(5) EGT and Fuel Flow(6) </p> <ol> <li> <p>Airspeed Indicator      Displays speed in knots.</p> </li> <li> <p>Heading     Displays magnetic bearing.</p> </li> <li> <p>Altimeter     Displays altitude and barometer setting.</p> </li> <li> <p>Vertical Speed     Displays vertical speed.</p> </li> <li> <p>Fuel Quantity     Displays fuel remaining in left and right tank.</p> </li> <li> <p>EGT and Fuel Flow</p> <p>Displays exhaust gas temperature and fuel flow. Fuel is in kg and is converted to gallons using <code>RPN 0.264172 *</code></p> </li> <li> <p>Oil     Displays oil temperature and pressure.</p> </li> <li> <p>Vacuum/Pressure and Battery Ammeter     Displays vaccuum pressure (necessary for operating of air driven instruments) and displays battery current (positive indicates charging, negative depleting).</p> </li> <li> <p>Propeller Speed     The propeller speed in RPM. Engine RPM is also the same given that it is direct drive.</p> </li> <li> <p>Caution Annunciators     Displays oil pressure and voltage caution annunciators.</p> </li> <li> <p>Warning Annunciators     Displays fuel pressure and vacuum pressure warning annunciators.</p> </li> <li> <p>NAVGPS mode     Display for navigation mode and also a push button to toggle between NAV (VLOC) and GPS.</p> </li> <li> <p>Next Waypoint     If there is a flight plan being followed this button will display data related to the next waypoint e.g. nautical miles left, desired track (bearing) and ETA in minutes.</p> </li> </ol>"},{"location":"decks/cirrus-sr22/#switches","title":"Switches","text":"<p>Main switches and access to light and ice related functions.</p> <p></p> <p>IGNITION(1) AVIONICS(2) BAT 2(3) BAT 1(4)</p> <p>ALT 1(5) ALT 2(6) LIGHTS(7) ICING(8)</p> <p>FUEL OFF(9) FUEL LEFT(10) FUEL OFF(11)</p> <ol> <li>Ignition: Starter motor long press push button.     PythonPlugin required for long press button <code>&lt;X-Plane Path&gt;/Resources/Plugins/PythonPlugins/PI_cockpitdecks_helper.py)</code></li> <li>AVIONICS: On/off button to power BUS1/BUS2.</li> <li>BAT 2: On/off button for battery 2 (provides power when engine is not running).</li> <li>BAT 1: On/off button for battery 1 (provides power when engine is not running).</li> <li>ALT 1: On/off button for alternator (when engine is running provides power to systems and charges battery 1).</li> <li>ALT 2: On/off button for alternator (when engine is running provides power to systems and charges battery 2).</li> <li>LIGHTS: Takes you to Lights page.</li> <li>ICING: Takes you to Icing page.</li> <li>FUEL OFF: Sets fuel selector to left off position.</li> <li>FUEL LEFT: Sets fuel selector to left position.</li> <li>FUEL RIGHT: Sets fuel selector to right position.</li> <li>FUEL OFF: Sets fuel selector to right off position.</li> </ol>"},{"location":"decks/cirrus-sr22/#lights","title":"Lights","text":"<p>NAV(1) STROBE(2) LAND(3) ICE(4)</p> <ol> <li>Navigation lights     On/off button for navigation lights (wings/tail).</li> <li>Strobe Lights     On/off button for strobe lights (wing).</li> <li>Landing lights     On/off button for landing light.</li> <li>Ice lights     On/off button for ice light (Illuminates the leading edges of the wings).</li> </ol>"},{"location":"decks/cirrus-sr22/#icing","title":"Icing","text":"<p>PITOT(1) ICE PROTECT(2) PUMP BKUP(3) NORM/HIGH(4)</p> <p>PROP(5) WSHLD(6)</p> <ol> <li>Pitot Heat     Activates the pitot tube heating element.</li> <li>Ice Protect     Set to ON to inject de-icing fluid along the wing, horizontal stabilizer, and propeller blades.</li> <li>PUMP BKUP     Activates backup de-icing fluid pump.</li> <li>NORM/HIGH     Use NORM when icing conditions are encountered and prior to icing occurring.     Use MAX when ice buildup has occurred.     MAX switch does not toggle \u2013 it must be held in position for the duration of the process.  </li> <li>PROP     On/off button for prop heating element.</li> <li>WSHLD     On/off button for windshield de-icing.</li> </ol>"},{"location":"decks/cirrus-sr22/#fcu","title":"FCU","text":"<p>Autopilot related functions.</p> <p></p> <p>AP(1) FD(2) HDG(3) ALT(4)</p> <p>NAV(5) VNAV(6) APR(7) REV/BC(8)</p> <p>VS(9) FLC(10) HSI GPS(11) HSI NAV(12)</p> <ol> <li>AP</li> <li>FD provides visual cues for manual flight control based on autopilot logic without actually controlling the aircraft.</li> <li>HDG</li> <li>ALT</li> <li>NAV</li> <li>VNAV manages aircraft's vertical path according to a predefined route or waypoint altitudes.</li> <li>APR</li> <li>REV/BC</li> <li>VS</li> <li>FLC Maintains a set airspeed while climbing or descending to a selected altitude.</li> <li>HSI GPS Toggles between GPS 1 and GPS 2 navigation modes.</li> <li>HSI NAV Toggles between VOR 1 and VOR 2 navigation modes.</li> </ol>"},{"location":"decks/cirrus-sr22/#engine","title":"Engine","text":"<p>Displays engine related data.</p> <p></p> <p>Note</p> <p>Fuel flow uses the following formula for GPH: <code>fuel_flow_kg_sec 3600 * 0.8 / 3.78541 / 2 roundn</code></p> <p>Fuel estimate uses the following formula: <code>fuel_flow_kg_sec[0]} 3 roundn 0.000001 + / 3600 / 1 roundn</code></p>"},{"location":"decks/cirrus-sr22/#pedestal","title":"Pedestal","text":"<p>THROTTLE(1) TOGGLE BRAKES(2) FLAPS UP(3)</p> <p>MIXTURE(4) FLAPS RATIO(5)</p> <p>FLAPS DOWN(6)</p> <ol> <li>THROTTLE Displays throttle as a percentage.</li> <li>TOGGLE BRAKES Displays state of the parking brake. Push will toggle parking brake on/off.</li> <li>FLAPS UP Extends flaps one notch.</li> <li>MIXTURE Displays fuel mixture as a percentage.</li> <li>FLAPS RATIO Displays flaps state as a number between 0 and 1 (0 fully retracted, 1 fully extended).</li> <li>FLAPS DOWN Detracts flaps one notch.</li> </ol>"},{"location":"decks/cirrus-sr22/#radio","title":"Radio","text":"<p>SQUAWK DIGIT 1(1) SQUAWK DIGIT 2(2) SQUAWK DIGIT 3(3) SQUAWK DIGIT 4(4)</p> <p>Transponder Mode(5) Ident(6) COM 1(7)</p> <p>ADF FREQ(8) VLOC 1(9)</p> <ol> <li>SQUAWK DIGIT 1</li> <li>SQUAWK DIGIT 2</li> <li>SQUAWK DIGIT 3</li> <li>SQUAWK DIGIT 4</li> <li>Transponder Mode</li> <li>IDENT</li> <li>COM 1 Displays COM1 frequency and COM1 standby frequency. Pressing button will swap frequencies.</li> <li>ADF FREQ Displays ADF frequency and ADF standby frequency. Pressing button will swap frequencies.</li> <li>VLOC 1 Displays NAV1 frequency and NAV1 standby frequency. Pressing button will swap frequencies.</li> </ol> <p>Note</p> <p>Transponder functions will be deprecated after moving to a new page.## Switch Panel</p> <p></p>"},{"location":"decks/cirrus-sr22/#transponder","title":"Transponder","text":""},{"location":"decks/cirrus-sr22/#squawk-code-buttons","title":"SQUAWK CODE BUTTONS","text":"<p>The top four buttons display the squawk code. They also serve as push buttons to increment the transponder digits.</p>"},{"location":"decks/cirrus-sr22/#transponder-mode-buttons","title":"Transponder Mode Buttons","text":"<ol> <li>ON</li> <li>OFF</li> <li>STBY</li> <li>ALT</li> <li>TEST</li> </ol>"},{"location":"decks/cirrus-sr22/#ident","title":"IDENT","text":"<p>Transmits radio beacon for a short period of time.</p>"},{"location":"decks/cirrus-sr22/#radio-beacon","title":"RADIO BEACON","text":"<p>Displays an R if the transponder is broadcasting. This will display intermittently or constantly for short period of time if IDENT is pushed. </p>"},{"location":"decks/cirrus-sr22/#mode","title":"MODE","text":"<p>Displays current mode of the transponder.</p>"},{"location":"decks/lancair-evolution/","title":"Lancair Evolution","text":""},{"location":"decks/lancair-evolution/#deck-functions","title":"Deck Functions","text":""},{"location":"decks/lancair-evolution/#home","title":"Home","text":"<p>Home page can be accessed via button e0 on the Loupedeck Live (button without a number).</p>"},{"location":"decks/lancair-evolution/#pfi","title":"PFI","text":"<p>Primary Flight Instrument Page displays speed (in knots), heading, altitude and vertical speed.</p> <p>Fuel quantity for left and right tanks in gallons.</p> <p>Wind data as is displayed by G1000 is provided (as 4 vectors, headwind, tailwind and left/right crosswinds).</p> <p>The gear annunciator closely resembles the display on the Lancair Evolution. Gear up shows as dimmed green dots, when gear is down these will change to bright green.</p> <p>The flaps button is displayed as a switch.</p> <p>Fuel duration (a calculation of time remaining based on fuel flow and fuel quantity).</p> <p>Caution/Warning annunciators.</p> <p>Information on the next waypoint in flight plan. This now includes the actual waypoint name.</p>"},{"location":"decks/lancair-evolution/#switches","title":"SWITCHES","text":"<p>Switches is spread across two pages.</p> <p>Primarily \"Battery and Electrical Panel\", Ignition, Fuel Pump and Fuel tank selector functions.</p> <p>The second page covers lights and icing switches. </p>"},{"location":"decks/lancair-evolution/#audio-panel","title":"AUDIO PANEL","text":"<p>Provides a close replica of the audio panel (Garmin GMA-1347) on the Lancair Evolution.</p>"},{"location":"decks/lancair-evolution/#fcu","title":"FCU","text":"<p>Functions for TS Sorceror autopilot module. </p>"},{"location":"decks/lancair-evolution/#g1000","title":"G1000","text":"<p>G1000 page adapted from GCU-478 page (work in progress).</p>"},{"location":"decks/lancair-evolution/#radio","title":"RADIO","text":"<p>COM1/COM2, NAV1/NAV2, ADF and XPDR functions.</p>"},{"location":"decks/lancair-evolution/#engine","title":"ENGINE","text":"<p>Provides a close replica of the G1000 MFD (Multi Function Display) EIS (Engine Indication System). See https://x-plane.com/manuals/G1000_Manual.pdf page 54.</p> <p>The configuration for reference: Configuration 4, Single-Engine Turboprop, Lancair Evolution and similar.  </p>"},{"location":"decks/lancair-evolution/#pedestal","title":"PEDESTAL","text":"<p>Intended for flaps, gear, brakes and other functions usually found in pedestal area.</p>"},{"location":"decks/lancair-evolution/#transponder","title":"TRANSPONDER","text":"<p>Dedicated transponder page (transponder mode and id functions can also be found in radio page).</p>"},{"location":"decks/lancair-evolution/#weather","title":"WEATHER","text":"<p>This page provides comprehensive weather data including coverage for different cloud layers and tropo data.</p>"},{"location":"decks/lancair-evolution/#views","title":"VIEWS","text":"<p>Provides functions to views and ability to set views with long press.</p>"},{"location":"decks/toliss-airbus-A320-neo/","title":"Toliss Airbus A320 NEO","text":"<p>Placeholder</p>"},{"location":"decks/toliss-airbus-A321-neo/","title":"Toliss Airbus A321 NEO","text":"<p>This configuration created by devleaks provides various functions across multiple decks for the Toliss Airbus A321 NEO.</p>"},{"location":"decks/toliss-airbus-A321-neo/#comm-radio","title":"COMM-RADIO","text":""},{"location":"decks/toliss-airbus-A321-neo/#consoles","title":"CONSOLES","text":""},{"location":"decks/toliss-airbus-A321-neo/#efis-ecam","title":"EFIS ECAM","text":""},{"location":"decks/toliss-airbus-A321-neo/#fcu","title":"FCU","text":""},{"location":"decks/toliss-airbus-A321-neo/#plus","title":"PLUS","text":""},{"location":"examples/annunciators/","title":"Annunciator Buttons","text":""},{"location":"examples/annunciators/#displaying-airspeed","title":"Displaying airspeed","text":"<pre><code>  - index: 0\n    name: SPD\n    type: none\n    label: SPD\n    label-size: 9\n    label-color: black\n    annunciator:\n      size: medium\n      model: A\n      parts:\n        A0:\n          color: lime\n          text-size: 100\n          formula: \"1\"\n          text: \"${sim/cockpit2/gauges/indicators/airspeed_kts_pilot}\"\n          text-font: Seven Segment.ttf\n          text-format: \"{0:.0f}\"\n</code></pre>"},{"location":"examples/annunciators/#displaying-fuel-tanks","title":"Displaying fuel tanks","text":"<pre><code>- index: 4 # Fuel\n    name: FUEL\n    type: none\n    label: FUEL QTY\n    label-color: Black\n    label-size: 10\n    annunciator:\n      size: medium\n      model: B\n      parts:\n        B0:\n          color: yellow\n          text-size: 32\n          formula: \"${sim/cockpit2/fuel/fuel_quantity[0]} 0.264172 * 2 roundn\"\n          text: \"L ${formula} gal\"\n        B1:\n          color: yellow\n          text-size: 32\n          formula: \"${sim/cockpit2/fuel/fuel_quantity[1]} 0.264172 * 2 roundn\"\n          text: \"R ${formula} gal\"\n</code></pre>"},{"location":"examples/annunciators/#displaying-rpm-and-hobbs","title":"Displaying RPM and hobbs","text":"<pre><code>  - index: 8\n    name: RPM\n    type: none\n    label: RPM\n    label-color: Black\n    label-size: 10\n    annunciator:\n      size: medium\n      model: B\n      parts:\n        B0:\n          color: lime\n          text-size: 42\n          text: \"${sim/cockpit2/engine/indicators/prop_speed_rpm[0]}\"\n          text-format: \"{0:.0f}\"\n          formula: \"1\"\n        B1:\n          color: white\n          text-size: 30\n          text: \"${sim/cockpit2/clock_timer/hobbs_time_hours}:${sim/cockpit2/clock_timer/hobbs_time_minutes}:${sim/cockpit2/clock_timer/hobbs_time_seconds}\"\n          formula: \"1\"\n          text-format: \"{0:.0f}\"\n</code></pre>"},{"location":"examples/annunciators/#caution-annunciator","title":"Caution Annunciator","text":"<pre><code>  - index: 9\n    name: CAUTION\n    type: none\n    label: CAUTION\n    label-size: 10\n    label-color: black\n    annunciator:\n      size: medium\n      model: B\n      parts:\n        B0:\n          text: \"OIL PRESS\"\n          text-color: firebrick\n          text-font: DIN Condensed Black.otf\n          text-size: 50\n          formula: ${sim/cockpit/warnings/annunciators/oil_pressure}\n        B1:\n          text: \"VOLTS\"\n          text-color: firebrick\n          text-font: DIN Condensed Black.otf\n          text-size: 50\n          formula: ${sim/cockpit/warnings/annunciators/generator}\n</code></pre> bubble_sort.py<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"examples/annunciators/#warning-annunciator","title":"Warning Annunciator","text":"Warning Annunciator<pre><code>  - index: 10\n    name: WARNING\n    type: none\n    label: WARNING\n    label-size: 10\n    label-color: black\n    annunciator:\n      size: medium\n      model: B\n      parts:\n        B0:\n          text: \"L FUEL R\"\n          text-color: darkorange\n          text-font: DIN Condensed Black.otf\n          text-size: 50\n          formula: ${sim/cockpit/warnings/annunciators/fuel_pressure}\n        B1:\n          text: \"L VAC R\"\n          text-color: darkorange\n          text-font: DIN Condensed Black.otf\n          text-size: 50\n          formula: ${sim/cockpit/warnings/annunciators/low_vacuum}\n</code></pre>"},{"location":"examples/encoder-toggle/","title":"Encoder Toggle Examples","text":""},{"location":"examples/encoder-value/","title":"Encoder Value Extended Examples","text":""},{"location":"examples/side-icon/","title":"Side Icon Examples","text":""},{"location":"examples/side-icon/#left-side-display-for-spdhdgqnh-encoders","title":"Left side display for SPD/HDG/QNH encoders","text":"<pre><code>- index: left\n  name: left_screen\n  type: none\n  side:\n    icon-color: Black\n    labels:\n      - label: \"SPD\"\n        label-size: 16\n        label-font: B612-Bold\n        label-color: Grey\n        formula: \"${data:sim/cockpit2/autopilot/airspeed_dial_kts_mach}\"\n        text-size: 16\n        text-font: Seven Segment.ttf\n        text-color: White\n        text-format: \"{0:00.0f}\"\n        text: \"${formula}\"\n      - label: \"HDG\"\n        label-size: 14\n        label-font: B612-Bold\n        label-color: Gold\n        formula: \"${sim/cockpit/autopilot/heading_mag}\"\n        text-size: 18\n        text-font: Seven Segment.ttf\n        text-color: White\n        text-format: \"{0:00.0f}\"\n        text: \"${formula}\"\n      - label: \"QNH\"\n        label-size: 14\n        label-font: B612-Bold\n        label-color: Gold\n        formula: \"${sim/cockpit2/gauges/actuators/barometer_setting_in_hg_pilot}\"\n        text-size: 18\n        text-font: Seven Segment.ttf\n        text-color: White\n        text-format: \"{0:01.2f}\"\n        text: \"${formula}\"\n</code></pre>"},{"location":"examples/side-icon/#right-side-display-for-altvsmix-encoders","title":"Right side display for ALT/VS/MIX encoders","text":"<pre><code>- index: right\n  name: right_screen\n  type: none\n  side:\n    icon-color: Black\n    labels:\n      - label: \"ALT\"\n        label-size: 16\n        label-font: B612-Bold\n        label-color: Grey\n        formula: \"${sim/cockpit2/autopilot/altitude_dial_ft}\"\n        text-size: 16\n        text-font: Seven Segment.ttf\n        text-color: White\n        text-format: \"{0:04.0f}\"\n        text: \"${formula}\"\n      - label: \"VS\"\n        label-size: 14\n        label-font: B612-Bold\n        label-color: Gold\n        formula: \"${sim/cockpit/autopilot/vertical_velocity} 100 /\"\n        text-size: 18\n        text-font: Seven Segment.ttf\n        text-color: White\n        text-format: \"{0:+01.0f}\"\n        text: \"${formula}\"\n      - label: \"MIX\"\n        label-size: 14\n        label-font: B612-Bold\n        label-color: Gold\n        formula: \"${sim/flightmodel/engine/ENGN_mixt[0]} 100 *\"\n        text-size: 18\n        text-font: Seven Segment.ttf\n        text-color: White\n        text-format: \"{0:01.0f}\"\n        text: \"${formula}%\"\n</code></pre>"},{"location":"experimental/encoder-toggle/","title":"Encoder Toggle","text":"<p>New encoder that allows use of the Loupedeck encoders push action to toggle between steps values e.g. coarse/fine.</p> <pre><code>class EncoderToggle(Activation):\n    \"\"\"\n    Defines a encoder with stepped value coupled to an on/off button.\n\n    On\n    Command 0: Executed when turned clockwise\n    Command 1: Executed when turned counter-clockwise\n    Off\n    Command 2: Executed when turned clockwise\n    Command 3: Executed when turned counter-clockwise\n    \"\"\"\n\n    def __init__(self, config: dict, button: \"Button\"):\n        Activation.__init__(self, config=config, button=button)\n\n        # Commands\n        self._commands = [Command(path) for path in config.get(\"commands\", [])]\n        if len(self._commands) &gt; 0:\n            self._command = self._commands[0]\n        else:\n            logger.error(f\"button {self.button_name()}: {type(self).__name__} must have at least one command\")\n\n        # Internal status\n        self._turns = 0\n        self._cw = 0\n        self._ccw = 0\n\n        self.longpush = True        \n        self._on = True\n\n    def num_commands(self):\n        return len(self._commands) if self._commands is not None else 0\n\n    def is_valid(self):\n        if self.num_commands() != 4:\n            logger.warning(f\"button {self.button_name()}: {type(self).__name__} must have 4 commands\")\n            return False\n        return True  # super().is_valid()\n\n    def activate(self, state):\n        if state == 1 and self._on:\n            self._on = False\n        elif state == 1 and not self._on:\n            self._on = True\n\n        if state &lt; 2:\n            super().activate(state)\n        elif state == 2 and not self.is_pressed():  # rotate anti clockwise\n            if self._on:\n                self.command(self._commands[0])\n                print(self._commands[0])\n            else:\n                self.command(self._commands[2])\n                print(self._commands[2])\n\n        elif state == 3 and not self.is_pressed():  # rotate clockwise\n            if self._on:\n                self.command(self._commands[1])\n                print(self._commands[1])\n            else:\n                self.command(self._commands[3])\n                print(self._commands[3])\n        else:\n            logger.warning(f\"button {self.button_name()}: {type(self).__name__} invalid state {state}\")\n\n    def get_status(self):\n        a = super().get_status()\n        if a is None:\n            a = {}\n        return a | {\"cw\": self._cw, \"ccw\": self._ccw, \"turns\": self._turns}\n\n    def describe(self):\n        \"\"\"\n        Describe what the button does in plain English\n        \"\"\"\n        if self.longpush:\n            return \"\\n\\r\".join(\n                [\n                    f\"This encoder has longpush option.\",\n                    f\"This encoder executes command {self._commands[0]} when it is not pressed and turned clockwise.\",\n                    f\"This encoder executes command {self._commands[1]} when it is not pressed and turned counter-clockwise.\",\n                    f\"This encoder executes command {self._commands[2]} when it is pressed and turned clockwise.\",\n                    f\"This encoder executes command {self._commands[3]} when it is pressed and turned counter-clockwise.\",\n                ]\n            )\n        else:\n            return \"\\n\\r\".join(\n                [\n                    f\"This encoder does not have longpush option.\",\n                    f\"This encoder executes command {self._commands[0]} when it is pressed.\",\n                    f\"This encoder does not execute any command when it is released.\",\n                    f\"This encoder executes command {self._commands[1]} when it is turned clockwise.\",\n                    f\"This encoder executes command {self._commands[2]} when it is turned counter-clockwise.\",\n                ]\n            )\n</code></pre>"},{"location":"experimental/encoder-value/","title":"Encoder Value Extended","text":"<p>Based on existing EncoderValue class</p> <pre><code>class EncoderValueExtended(OnOff):\n    \"\"\"\n    Activation that maintains an internal value and optionally write that value to a dataref\n    \"\"\"\n\n    def __init__(self, config: dict, button: \"Button\"):\n        self.step = float(config.get(\"step\", 1))\n        self.stepxl = float(config.get(\"stepxl\", 10))\n        self.value_min = float(config.get(\"value-min\", 0))\n        self.value_max = float(config.get(\"value-max\", 100))\n        self.options = config.get(\"options\", None)\n\n        # Internal status\n        self._turns = 0\n        self._cw = 0\n        self._ccw = 0\n        self.encoder_current_value = float(config.get(\"initial-value\", 1))\n        self._step_mode = self.step\n        self._local_dataref = \"data:\" + config.get(\"dataref\", None)  # local dataref to write to\n\n        OnOff.__init__(self, config=config, button=button)\n\n    def init(self):\n        if self._inited:\n            return\n        value = self.button.get_current_value()\n        if value is not None:\n            self.encoder_current_value = value\n            logger.debug(f\"button {self.button_name()} initialized on/off at {self.encoder_current_value}\")\n        elif self.initial_value is not None:\n            self.encoder_current_value = self.initial_value\n            logger.debug(f\"button {self.button_name()} initialized on/off at {self.onoff_current_value} from initial-value\")\n        if self.encoder_current_value is not None:\n            self._inited = True\n\n    def decrease(self, x):\n        if self.options == \"modulo\":\n            new_x = (x - self._step_mode - self.value_min) % (self.value_max - self.value_min + 1) + self.value_min\n            return new_x\n        else:\n            x = x - self._step_mode\n            if x &lt; self.value_min:\n                return self.value_min\n            return x\n\n    def increase(self, x):\n        if self.options == \"modulo\":\n            new_x = (x + self._step_mode - self.value_min) % (self.value_max - self.value_min + 1) + self.value_min\n            return new_x\n        else:\n            x = x + self._step_mode\n            if x &gt; self.value_max:\n                return self.value_max\n            return x\n\n    def is_valid(self):\n        if self.writable_dataref is None:\n            logger.error(f\"button {self.button_name()}: {type(self).__name__} must have a dataref to write to\")\n            return False\n        return super().is_valid()\n\n    def activate(self, state):\n        if state == 1:\n            if self._step_mode == self.step:\n                self._step_mode = self.stepxl\n            else:\n                self._step_mode = self.step\n            self.view()\n            return\n\n        ok = False\n        x = self.encoder_current_value\n        if x is None:\n            x = 0\n        if state == 2:  # anti-clockwise\n            # x = x - self._step_mode\n            x = self.decrease(x)\n            ok = True\n            self._turns = self._turns - 1\n            self._ccw = self._ccw + 1\n        elif state == 3:  # clockwise\n            # x = x + self._step_mode\n            x = self.increase(x)\n            ok = True\n            self._turns = self._turns + 1\n            self._cw = self._cw + 1\n        elif self.has_long_press() and self.long_pressed():\n            self.long_press(state)\n            print('why hello again!')\n            logger.debug(f\"button {self.button_name()}: {type(self).__name__}: long pressed\")\n            return\n\n        if ok:\n            self.encoder_current_value = x\n            self.write_dataref(x)\n\n            # write to local dataref if configured\n            if self._local_dataref:\n                self._write_dataref(self._local_dataref, x)\n                print(f'self._local_dataref: {self._local_dataref}')\n\n            print(f'x: {x}')\n\n    def get_status(self):\n        a = super().get_status()\n        if a is None:\n            a = {}\n        return a | {\n            \"step\": self.step,\n            \"stepxl\": self.stepxl,\n            \"value_min\": self.value_min,\n            \"value_max\": self.value_max,\n            \"cw\": self._cw,\n            \"ccw\": self._ccw,\n            \"turns\": self._turns,\n        }\n\n    def describe(self):\n        \"\"\"\n        Describe what the button does in plain English\n        \"\"\"\n        a = [\n            f\"This encoder increases a value by {self.step} when it is turned clockwise.\",\n            f\"This encoder decreases a value by {self.step} when it is turned counter-clockwise.\",\n            f\"The value remains in the range [{self.value_min}-{self.value_max}].\",\n        ]\n        if self.writable_dataref is not None:\n            a.append(f\"The value is written in dataref {self.writable_dataref}.\")\n        return \"\\n\\r\".join(a)\n</code></pre>"},{"location":"experimental/side-icon/","title":"Side Icon (Modified)","text":"<p>Based on the original IconSide class</p> <pre><code>class IconSide(Icon):  # modified Representation IconSide class \n    def __init__(self, config: dict, button: \"Button\"):\n        config['icon-color'] = config['side'].get(\"icon-color\", button.get_attribute(\"default-icon-color\"))\n        Icon.__init__(self, config=config, button=button)\n\n        self.side = config.get(\"side\")  # multi-labels\n        self.centers = self.side.get(\"centers\", [43, 150, 227])  # type: ignore\n        self.labels: str | None = self.side.get(\"labels\")  # type: ignore\n        self.label_position = config.get(\"label-position\", \"cm\")  # \"centered\" on middle of side image\n\n    def get_datarefs(self):\n        datarefs = []\n        for label in self.labels:\n            drefs = self.button.scan_datarefs(label)\n            if len(drefs) &gt; 0:\n                datarefs = datarefs + drefs\n        return datarefs\n\n    # def get_datarefs(self):\n    #     if self.datarefs is None:\n    #         self.datarefs = []\n    #         if self.labels is not None:\n    #             for label in self.labels:\n    #                 dref = label.get('dataref')\n    #                 if dref is not None:\n    #                     logger.debug(f\"button {self.button_name()}: added label dataref {dref}\")\n    #                     self.datarefs.append(dref)\n    #     return self.datarefs\n\n    def is_valid(self):\n        if self.button.index not in [\"left\", \"right\"]:\n            logger.debug(f\"button {self.button_name()}: {type(self).__name__}: not a valid index {self.button.index}\")\n            return False\n        return super().is_valid()\n\n    def get_image_for_icon(self):\n        \"\"\"\n        Helper function to get button image and overlay label on top of it for SIDE keys (60x270).\n        Side keys can have 3 labels placed in front of each knob.\n        (Currently those labels are static only. Working to make them dynamic.)\n        \"\"\"\n        image = super().get_image_for_icon()\n\n        if image is None:\n            return None\n\n        draw = None\n\n        if self.labels is not None:\n            image = image.copy()  # we will add text over it\n            draw = ImageDraw.Draw(image)\n            inside = round(0.04 * image.width + 0.5)\n            vheight = 38 - inside\n\n            vcenter = [35, 124, 213]  # this determines the number of acceptable labels, organized vertically\n            cnt = self.side.get(\"centers\")\n\n            if cnt is not None:\n                vcenter = [round(270 * i / 100, 0) for i in convert_color(cnt)]  # !\n\n            li = 0\n            for label in self.labels:\n                txt = label.get(\"label\")\n\n                get_text = self.button.get_text(label, root=\"text\")\n\n                if li &gt;= len(vcenter) or txt is None:\n                    continue\n\n                txto = get_text\n\n                lfont = label.get(\"label-font\", self.label_font)\n                lsize = label.get(\"label-size\", self.label_size)\n                font = self.get_font(lfont, lsize)\n\n                # Horizontal centering is not an issue...\n                label_position = label.get(\"label-position\", self.label_position)\n                w = image.width / 2\n                p = \"m\"\n                a = \"center\"\n                if label_position == \"l\":\n                    w = inside\n                    p = \"l\"\n                    a = \"left\"\n                elif label_position == \"r\":\n                    w = image.width - inside\n                    p = \"r\"\n                    a = \"right\"\n                # Vertical centering is black magic...\n                h = vcenter[li] - lsize / 2\n                if label_position[1] == \"t\":\n                    h = vcenter[li] - vheight\n                elif label_position[1] == \"b\":\n                    h = vcenter[li] + vheight - lsize\n\n                draw.multiline_text(\n                    (w, h), text=txt, font=font, anchor=p + \"m\", align=a, fill=label.get(\"label-color\", self.label_color)  # (image.width / 2, 15)\n                )\n\n                # Text below LABEL\n                tfont = label.get(\"text-font\")\n                tsize = label.get(\"text-size\")\n                tfont = self.get_font(tfont, tsize)\n\n                text_position = h + lsize + 5  # Adjust based on your needs, adding lsize for simplicity\n                draw.text(\n                    (w, text_position), text=txto, font=tfont, anchor=p + \"m\", align=a, fill=label.get(\"text-color\")\n                )\n\n                li = li + 1\n        return image\n\n    def describe(self):\n        return \"The representation produces an icon with optional label overlay for larger side buttons on LoupedeckLive.\"\n</code></pre>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#python","title":"Python","text":"<p>https://www.python.org/</p> <ol> <li>Download Python https://www.python.org/downloads/</li> <li>Install</li> </ol>"},{"location":"getting-started/installation/#xppython","title":"XPPython","text":"<p>https://xppython3.readthedocs.io/en/latest/index.html</p> <ol> <li>Download XPPython3 zipfile</li> <li>Extract the xp3xxx.zip into your <code>X-Plane/Resources/plugins</code></li> <li>Follow steps f\u00a7or MAC quarantine https://xppython3.readthedocs.io/en/latest/usage/mac_quarantine.html</li> <li>Start X-Plane</li> </ol>"},{"location":"getting-started/installation/#cockpitdecks","title":"Cockpitdecks","text":"<p>You can also follow installation instructions specific to cockpitdecks here: https://devleaks.github.io/cockpitdecks-docs/Installation/</p>"},{"location":"getting-started/installation/#python-packages","title":"Python packages","text":"<p>Required packages:</p> <pre><code>pip install ruamel.yaml pillow\n</code></pre> <p>Weather/Metar button representation:</p> <pre><code>pip install avwx-engine scipy suntime timezonefinder\n</code></pre> <p>Streamdeck devices:</p> <pre><code>pip install streamdeck\n</code></pre> <p>Loupedeck devices:</p> <pre><code>pip install git+https://github.com/devleaks/python-loupedeck-live.git\n</code></pre> <p>Touch Mini devices:</p> <pre><code>pip install git+https://github.com/devleaks/python-berhinger-xtouchmini.git\n</code></pre>"},{"location":"getting-started/installation/#download-cockpitdecks","title":"Download cockpitdecks","text":"<p>Warning</p> <p>Supports some experimental features such as custom sides buttons, encoders with toggle for step changes and improved EncoderValue class.</p> OriginalExperimental <pre><code>git checkout https://github.com/devleaks/cockpitdecks.git\n</code></pre> <pre><code>git checkout https://github.com/dlicudi/cockpitdecks.git\n</code></pre>"},{"location":"getting-started/installation/#cockpitdecks-helper-plugin","title":"Cockpitdecks Helper Plugin","text":"<pre><code>cp PI_cockpitdecks_helper.py ~/X-Plane\\ 12/Resources/plugins/PythonPlugins/\n</code></pre>"},{"location":"getting-started/installation/#cockpitdecks-configs","title":"Cockpitdecks Configs","text":"<pre><code>git checkout https://github.com/dlicudi/cockpitdecks-configs.git\n</code></pre>"},{"location":"getting-started/requirements/","title":"Requirements","text":"<ul> <li> X-Plane 12</li> <li> Python 3.10+</li> <li> XPPython</li> <li> Loupedeck Live</li> <li> Cockpitdecks</li> <li> Cockpitdecks Helper Plugin</li> </ul>"},{"location":"modules/audio-panel/","title":"Audio Panel","text":""},{"location":"modules/engine/","title":"Engine","text":"<p>Engine data based on the engine type.<sup>1</sup></p> Number Engine Type Description 1 Single-Engine Fixed-Pitch Propeller Cessna 172 and similar 2 Single-Engine Constant-Speed Propeller Cessna 182 and similar 3 Single-Engine Turbocharged / Turbo-normalized Cessna 400 and similar 4 Single-Engine Turboprop Lancair Evolution and similar 5 Twin-Engine Piston Beechcraft Baron and similar 6 Single Engine Jet Fictional <ol> <li> <p>G1000_Manual.pdf [MFD] Engine Indication System (EIS) on page 54.\u00a0\u21a9</p> </li> </ol>"},{"location":"modules/g1000/","title":"G1000","text":""},{"location":"modules/modules/","title":"Overview","text":"<p>Re-usable functionality such as Radio, G1000 etc.</p>"},{"location":"modules/radio/","title":"Radio","text":""},{"location":"modules/views/","title":"Views","text":""},{"location":"modules/weather/","title":"Weather","text":""},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/category/releases/","title":"Releases","text":""},{"location":"blog/category/cessna-172-sp/","title":"Cessna 172 SP","text":""},{"location":"blog/category/cirrus-sr22/","title":"Cirrus SR22","text":""},{"location":"blog/category/beechcraft-baron-58/","title":"Beechcraft Baron 58","text":""}]}